# BSD Router Project NanoBSD configuration file
# http://bsdrp.net
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router 
# Some cleanup idea taken from imp@ nanoBSD script
# Add other parts came from the FreeNAS 8 too (iXsystems)
#
################## Common section #################

# Console port speed
COM_SPEED=115200
# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was set by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
# BOOT_COMCONSOLE_SPEED is useless because we using /boot.config with -Sspeed option
# But for baud higher than 9600 is not supported by boot0:
#  then we let the speed already configured by the BIOS by setting it to 0
CONF_BUILD='
WITH_META_MODE=
MALLOC_PRODUCTION=
BOOT_BOOT0_COMCONSOLE_SPEED=0
'

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
# We would compile symbol files, but not install them by default
CONF_INSTALL='
'

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_FORTH= mandatory for the boot-loader
# WITHOUT_GROFF= Ports needs for build man page
# WITHOUT_KVM= and WITHOUT_KVM_SUPPORT= prevent buildworld to complet (don't know why)
CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_AMD=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATF=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_AUTOFS=
WITHOUT_BHYVE=
WITHOUT_BLUETOOTH=
WITHOUT_BOOTPARAMD=
WITHOUT_BOOTPD=
WITHOUT_BSDINSTALL=
WITHOUT_CALENDAR=
WITHOUT_CCD=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EE=
WITHOUT_EXAMPLES=
WITHOUT_FINGER=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GNUCXX=
WITHOUT_GPIB=
WITHOUT_GPIO=
WITHOUT_HAST=
WITHOUT_HTML=
WITHOUT_ICONV=
WITHOUT_INFO=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_ISCSI=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LIB32=
WITHOUT_LLDB=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PC_SYSINSTALL=
WITHOUT_PORTSNAP=
WITHOUT_PROFILE=
WITHOUT_QUOTAS=
WITHOUT_RBOOTD=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SHAREDOCS=
WITHOUT_SVNLITE=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TALK=
WITHOUT_TESTS=
WITHOUT_TESTS_SUPPORT=
WITHOUT_TFTP=
WITHOUT_TIMED=
WITHOUT_UNBOUND=
WITHOUT_USB_GADGET_EXAMPLES=
WITHOUT_WIRELESS=
WITHOUT_WPA_SUPPLICANT_EAPOL=
WITHOUT_ZFS=
WITH_GCC=
WITH_IDEA=
WITH_OFED=
WITH_DEBUG_FILES=
WITH_REPRODUCIBLE_BUILD=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

### HOW TO Calculate partition size ###
# If you want a 5MB partition, do:
# 5 * 1024 * 1024 / 512 = 10240

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# about 15MB = 20480
NANO_CONFSIZE=20480

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=20480

# Size of the /etc ramdisk in 512 bytes sectors
# 20480=10MB
NANO_RAM_ETCSIZE=20480

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 40960=20MB (usefull for log files)
NANO_RAM_TMPVARSIZE=40960

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# If using GPT partition table, install EFI loader
# currently off as the EFI loader does not respect
# the GPT bootme flag and always boots the first partition.
NANO_GPT_INSTALL_EFI=0

# Label name
# Alphacharacter only
NANO_LABEL=${NANO_NAME}

if [ "$NANO_DISK_SCHEME" = gpt ]; then
	NANO_DRIVE=gpt/${NANO_LABEL}
fi

# Progress Print level
PPLEVEL=3

# Add netblast/netrecieve and netmap tools
add_netrate () {
    TOOLS_LIST="cxgbtool crypto ifinfo mctest netmap netrate/netblast netrate/netreceive netrate/netsend"
    mkdir -p ${NANO_WORLDDIR}/dev
    mount -t devfs devfs ${NANO_WORLDDIR}/dev
    mount -t nullfs ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
    mkdir -p ${NANO_WORLDDIR}/usr/workdir
    for TOOL in ${TOOLS_LIST}; do
        # netmap is not available on sparc64, and disabled on i386
        if [ ${NANO_ARCH} = "sparc64" -a ${TOOL} = "netmap" ]; then
		continue
        fi
        if [ ${NANO_ARCH} = "i386" -a ${TOOL} = "netmap" ]; then
		continue
        fi
        export TOOL
        CR 'make clean -C /usr/src/tools/tools/${TOOL}'
        CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
            MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
            UNAME_r=${FBSD_DST_RELEASE} UNAME_v="FreeBSD ${FBSD_DST_RELEASE}" \
            UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
            make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL}'
		CR 'make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL} install clean'
    done # for TOOL
    rm -rf ${NANO_WORLDDIR}/usr/workdir
    umount ${NANO_WORLDDIR}/usr/src
    umount ${NANO_WORLDDIR}/dev
}

# Add Quagga BGP route injector
add_quagga-bgp-netgen () {
    mkdir -p ${NANO_WORLDDIR}/dev
    mount -t devfs devfs ${NANO_WORLDDIR}/dev
    mount -t nullfs ${NANO_TOOLS}/tools/quagga-bgp-netgen ${NANO_WORLDDIR}/usr/src
    mkdir -p ${NANO_WORLDDIR}/usr/workdir
    CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		UNAME_r=${FBSD_DST_RELEASE} UNAME_v="FreeBSD ${FBSD_DST_RELEASE}" \
		UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
        make WRKDIRPREFIX=/usr/workdir -C /usr/src/'
	CR 'make WRKDIRPREFIX=/usr/workdir -C /usr/src/ install clean'
    rm -rf ${NANO_WORLDDIR}/usr/workdir
    umount ${NANO_WORLDDIR}/usr/src
    umount ${NANO_WORLDDIR}/dev
}

# Need to check if this function works with cross-compiling architecture!!!!
# Recursive complex fonction: Generate one function for each ports
add_port () {
	port=`echo $1 | sed -e 's/\//_/'`
	# Check if package allready exist
	cd ${PORTS_SRC}/$1
	# Warning: a package name can change regarding the build option
	if [ $# -gt 1 ]; then
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name "$2"`
	else
		PKG_NAME=`env PORTSDIR=${PORTS_SRC} make package-name`
	fi
	if [ -f ${NANO_OBJ}/ports/packages/All/${PKG_NAME}.txz ]; then
	# Pkg file found: Generate add_pkg_NAME function
		#Don't try to install pkg, the boot strap will install it
		if [ "$1" != "ports-mgmt/pkg" ]; then
			eval "
			add_pkg_${port} () {
				#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
				if [ ! -d \${NANO_OBJ}/ports ]; then
					mkdir -p \${NANO_OBJ}/ports/packages
				fi
				mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
				mount -t nullfs \${NANO_OBJ}/ports/packages \
					\${NANO_WORLDDIR}/usr/ports/packages
				# Run ldconfig before
				CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
				# Start the pkg add
				# Create the repo configuration file
				mkdir -p \${NANO_WORLDDIR}/usr/local/etc/pkg/repos
				cat <<EOF > \${NANO_WORLDDIR}/usr/local/etc/pkg/repos/myrepo.conf
myrepo: {
 url: "file:///usr/ports/packages",
 enabled: true,
 signature_type: 'none',
 assume_always_yes: true
}
FreeBSD: {
    enabled: false
}
EOF
			# Bug with pkg: not using the "-d" option prevent to install the package with error message "pkg fail to extract static"
			# Need to force assume_always_yes for avoiding bootstrap pkg confirmation too
				CR 'env ASSUME_ALWAYS_YES=true pkg -d add /usr/ports/packages/All/${PKG_NAME}.txz'
				umount \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports/packages
				rmdir \${NANO_WORLDDIR}/usr/ports
			}
       		customize_cmd add_pkg_${port}
       		"
		fi
	else
	# No pkg file: Generate add_port_NAME function
       	eval "
       	add_port_${port} () {
		#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
		[ -d \${NANO_OBJ}/ports ] ||
		  mkdir -p \${NANO_OBJ}/ports/packages
       		mount -t nullfs \${NANO_SRC} \${NANO_WORLDDIR}/usr/src
		mkdir -p \${NANO_WORLDDIR}/usr/ports
       		mount -t nullfs \${PORTS_SRC} \${NANO_WORLDDIR}/usr/ports
		mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
		mount -t nullfs \${NANO_OBJ}/ports/packages \
		  \${NANO_WORLDDIR}/usr/ports/packages
       		mkdir -p \${NANO_WORLDDIR}/dev
       		mount -t devfs devfs \${NANO_WORLDDIR}/dev
       		mkdir -p \${NANO_WORLDDIR}/usr/pobj
       		mkdir -p \${NANO_WORLDDIR}/usr/workdir
       		cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
		# If a port have NO_PACKAGE, comment-it
              	if grep -q NO_PACKAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
               		mv \${NANO_WORLDDIR}/usr/ports/$1/Makefile \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd
               		sed 's/NO_PACKAGE/\#NO_PACKAGE/g' \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd > \${NANO_WORLDDIR}/usr/ports/$1/Makefile
               	fi
		# Run ldconfig before
		CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
		# Start the build
		# With staging (mandatory for creating user packag during "install"),
		# there is a bug if we use one command "make install package":
		# It failed during do-package call. We had to do a "make install" && "make package"
		# But this method failed if the port didn't support staging :-(
		# Now I have to found a solution for avoiding this two same long command
			if grep -q NO_STAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
   					CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=\"FreeBSD ${FBSD_DST_RELEASE}\" \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			else
       			CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=\"FreeBSD ${FBSD_DST_RELEASE}\" \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  install BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
          		CR 'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} \
		  MACHINE=${NANO_ARCH} MACHINE_ARCH=${NANO_ARCH} OSVERSION=${FBSD_DST_OSVERSION} \
		  UNAME_r=${FBSD_DST_RELEASE} UNAME_v=\"FreeBSD ${FBSD_DST_RELEASE}\" \
		  UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} \
		  make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
                  package BATCH=yes -DWITH_PKGNG \
		  WITHOUT=\"NLS X11 DOCS EXAMPLES\" -DWITH_SSP_PORTS $2 clean'
			fi
		rm \${NANO_WORLDDIR}/etc/resolv.conf
               	rm -rf \${NANO_WORLDDIR}/usr/obj
               	rm -rf \${NANO_WORLDDIR}/usr/pobj
               	rm -rf \${NANO_WORLDDIR}/usr/workdir
               	umount \${NANO_WORLDDIR}/dev
		umount \${NANO_WORLDDIR}/usr/ports/packages
		rmdir \${NANO_WORLDDIR}/usr/ports/packages
               	umount \${NANO_WORLDDIR}/usr/ports
               	rmdir \${NANO_WORLDDIR}/usr/ports
               	umount \${NANO_WORLDDIR}/usr/src
        }
        customize_cmd add_port_${port}
       	"
	fi
}

#### Ports list section #####

# bapt@ broke the "make package-recurisve" and he doesn't want to fix it using
#  the fallacious argument of "it's dirty"
# => Need to manually list all the package to install
# Meanwhile, you can use "make package-depends-list | cut -d ' ' -f3" on a port
# for getting all its unordered running dependency.
# And you can use a grep "depends on .* - not found" /usr/obj/project/_.cust.add_port_port-name
# for getting the ordered list

add_port "ports-mgmt/pkg"

## Add your custom port list here (not before the ports/mgmt/pkg!) ##

# Then we need to install net-snmp without perl modules
# net-snmp support is not very good for FreeBSD, disable it
#add_port "net-mgmt/net-snmp" "-DWITH_MFD_REWRITES -DWITHOUT_TKMIB -DWITH_DUMMY -DWITHOUT_PERL_EMBEDDED -DWITHOUT_PERL"

# Extended bsnmpd modules:
add_port "net-mgmt/bsnmp-regex"
add_port "net-mgmt/bsnmp-ucd"

# Quagga: routing daemon
#add_port "devel/libdlmalloc"
#add_port "net/quagga" "WITH=\"DLMALLOC ISISD OSPF_OPAQUE_LSA TCPSOCKETS\" WITHOUT=\"PIMD\""
add_port "print/indexinfo"
add_port "devel/readline"
add_port "devel/json-c"
add_port "net/frr"
# Quagga install some software that we don't need anymore after install: devel/libtool*, devel/gettext, /devel/gmake, /lang/gawk

# Bird: routing daemon
add_port "net/bird" "WITH=\"FIREWALL\""
add_port "net/bird6" "WITH=\"FIREWALL\""

# FreeVRRPd (netgraph dependent)
add_port "net/freevrrpd"

# ipsec-tools: IKEv1
add_port "net/openldap24-client"
add_port "security/ipsec-tools" "WITH=\"RC5 IDEA RADIUS LDAP\""

# strongswan: IKEv2 and lot's more
add_port "security/strongswan" "WITH=\"MEDIATION GCM\" WITHOUT=\"EAPAKA3GPP2 EAPSIMFILE SQLITE UNBOUND LOADTESTER TESTVECTOR\""

# pmacct: IP accounting tool
add_port "net-mgmt/pmacct"

# ucarp: Userland carp because enabling carp in the kernel prevent to use FreeVRRPd
# UPDATE: With FreeBSD 8.2 carp can be compiled as module, it should not interfere with FreeVRRPd
add_port "net/ucarp"

# smcroute: Manipulate the multicast routes
add_port "net/smcroute"

# pim6*: IPv6 multicast routing daemons and tools
add_port "net/pim6-tools"
add_port "net/pim6dd"
add_port "net/pim6sd"

# mrouted: IPv4 DVMRP (multicast) routing daemon
add_port "net/mrouted"

# pimdd: IPv4 PIM Dense Mode daemon
add_port "net/pimdd"

# pimd: IPv4 PIM Sparse Mode daemon
add_port "net/pimd"

# tayga: userland NAT64 implementation
add_port "net/tayga"

# dnsmasq:  DHCP server, DNS forwarder
#add_port "math/gmp"
#add_port "security/nettle"
#add_port "dns/dnsmasq"
# DHCP server and client
add_port "net/isc-dhcp43-server"
#add_port "net/isc-dhcp43-relay"
add_port "net/dhcprelya"

# fswatch-mon: file change monitor (used for auto_save configuration)
add_port "sysutils/fswatch-mon"

# monit: managing and monitoring processes tool
add_port "sysutils/monit"

# tmux: screen equivalent, but better because BSD
add_port "devel/libevent"
add_port "sysutils/tmux"

# ipmi tools
add_port "sysutils/ipmitool"

# sudo: fine permission management
add_port "security/sudo"

# mpd5: multi-link PPP protocol server (netgraph dependent)
add_port "net/mpd5"

# high-performance (bridge only) netmap-ipfw and netmap-fwd
if [ ${NANO_ARCH} = "amd64" ]; then
	#add_port "net/netmap-ipfw"
	add_port "textproc/libucl"
	add_port "net/netmap-fwd"
fi

# mlvpn: Link aggregator
 add_port "devel/libev"
 add_port "security/libsodium"
add_port "net/mlvpn"

# openvpn
add_port "security/easy-rsa"
add_port "archivers/lzo2"
add_port "archivers/liblz4"
add_port "security/openvpn"
  add_port "security/libgpg-error"
 add_port "security/libgcrypt"
add_port "security/openvpn-auth-radius"

# some benchmark tools: iperf ant netpipe, These tools will help us to tune BSDRP for better perf
#add_port "benchmarks/netpipe" 
add_port "benchmarks/iperf" "WITH=\"IPV6\""
add_port "benchmarks/iperf3"

# LLDP daemon
#add_port "net-mgmt/lldpd" "WITHOUT=\"BASH JSON PROPRIETARY SNMP XML\""

# Python (being ansible manageable)
add_port "devel/libffi"
add_port "lang/python27"
add_port "lang/python2"
add_port "lang/python"
add_port "devel/py27-setuptools"

# ExaBGP: having fun with BGP
add_port "net/exabgp"

#add_port "net/openbfdd"
# VM tools
# VM tools brings too lot's of deps: Need to delete them all after installing (if there are used for build only)
#add_port "emulators/open-vm-tools" "-DWITHOUT_X11 -DWITHOUT_LIBNOTIFY -DWITHOUT_FUSE -DWITHOUT_ICU"
#add_port "emulators/virtualbox-ose-additions/" "-DWITHOUT_X11 -DWITHOUT_HAL"

# Allow fetching from SSL site
add_port "security/ca_root_nss"

# Permit BIOS upgrade
#add_port "sysutils/dmidecode"
 # Curl is just a build-deps of cmake (needed by libftdi)
 # But curl need base kerberos, then we remove this deps
 # And we de-install curl on the custom script
 #add_port "ftp/curl" "WITH=\"GSSAPI_NONE\" WITHOUT=\"GSSAPI_BASE CA_BUNDLE\""
#add_port "devel/libftdi" "WITHOUT=\"BOOST PYTHON\""
  add_port "misc/pciids"
 add_port "devel/libpci"
add_port "sysutils/flashrom" "WITHOUT=\"DMIDECODE FTDI\""
#add_port "sysutils/intel-nvmupdate"
#add_port "sysutils/intel-qcu"
add_port "sysutils/devcpu-data"

# NANOG traceroute : MPLS label decode, Path MTU discovery, AS lookup, spray mode
add_port "net/ntraceroute"

#### End of port list section ####

# Add netrate tools
customize_cmd add_netrate

# Add quagga-bgp-netgen tools
customize_cmd add_quagga-bgp-netgen

cleanup_ports () {
		# When port are build, they install build dependency that are not usefull for running the port
		# The list of build-only package to be delete can be found like this:
		# Fresh generate a BSDRP image, and copy packages.info to packages.info.first
		# Restart a BSDRP image build with the "-b" option
		# diff packages.info.first packages.info
		set +e
        	CR 'env ASSUME_ALWAYS_YES=true pkg delete -g auto* binutils-* bison* cmake* curl* expat-* m4* gcc-* gawk* gettext* gmake* jsoncpp-* libtool* perl* help2man* libiconv* mpfr-* mpc-* p5-gettext* libsigsegv* pkgconf* py27-Babel-* py27-Jinja2-* py27-MarkupSafe-* py27-alabaster-* py27-docutils-* py27-pygments-* py27-pystemmer-* py27-pytz-* py27-six-* py27-snowballstemmer-* py27-sphinx-* py27-sphinx_rtd_theme-*'
		# usr/local/lib/perl5 : Dirty hack
		#   pkg: rmdir(/usr/local/lib/perl5/5.14/perl/man/man3/): Directory not empty
		#   pkg didn't delete all MAN1 page related to perl too
		[ -d ${NANO_WORLDDIR}/usr/local/lib/perl5 ] && rm -rf ${NANO_WORLDDIR}/usr/local/lib/perl5
		[ -f ${NANO_WORLDDIR}/usr/local/man/man1/perl.1 ] && rm ${NANO_WORLDDIR}/usr/local/man/man1/perl*
		[ -f ${NANO_WORLDDIR}/tmp/PERL5_DEFAULT ] && rm ${NANO_WORLDDIR}/tmp/PERL5_DEFAULT
		set -e
}

customize_cmd cleanup_ports

# BSDRP custom function
bsdrp_custom () {
	# Replace BSDRP_VERSION in /boot/brand.4th with the version number in etc/version
	sed -i "" -e /BSDRP_VERSION/s//`cat ${NANO_WORLDDIR}/etc/version`/ ${NANO_WORLDDIR}/boot/brand.4th
	# Disable reverse DNS in sshd:
	echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config
	# Update login.conf db
	CR 'cap_mkdb /etc/login.conf'

	# Disable system beep, enable color with csh
	{
	echo "set nobeep"
	echo "setenv CLICOLOR true"
	} >> ${NANO_WORLDDIR}/etc/csh.cshrc
	
	# relocate /root/.ssh to /etc/dot.root.ssh
	# This permit to save ssh keys
	mkdir -p ${NANO_WORLDDIR}/etc/dot.ssh.root
	ln -s ../etc/dot.ssh.root ${NANO_WORLDDIR}/root/.ssh

	# turn on noatime for /cfg
	sed -i "" -e "/cfg/s/rw/rw,noatime/" ${NANO_WORLDDIR}/etc/fstab
	# Add /data partition to fstab (config script use it for archiving old configurations)
	[ "$NANO_DISK_SCHEME" = "gpt" ] && \
		NANO_DATA_DISK=/dev/${NANO_DRIVE}${NANO_SLICE_DATA:-data} || \
		NANO_DATA_DISK=/dev/ufs/${NANO_LABEL}${NANO_SLICE_DATA:-s4}
	echo "${NANO_DATA_DISK} /data ufs rw,noauto,failok 2 2" >> ${NANO_WORLDDIR}/etc/fstab
	# There is a problem around june 2014 with nanobsd: It didn't generate anymore the /data directory
	[ -d ${NANO_WORLDDIR}/data ] || mkdir -p ${NANO_WORLDDIR}/data

	# relocate /var/cron to /etc/cron
	# This permit to save crontab (only /etc and /usr/local/etc are saved)
	mkdir -p ${NANO_WORLDDIR}/etc/cron
	rm -rf ${NANO_WORLDDIR}/var/cron
	ln -s ../etc/cron ${NANO_WORLDDIR}/var/cron	

	# Add /etc/rc.conf.misc into the /etc/default/rc.conf
	sed -i "" -e "s/rc.conf.local/rc.conf.local \/etc\/rc.conf.misc/g" ${NANO_WORLDDIR}/etc/defaults/rc.conf

    # configure bsnmp
    cat <<EOF >>${NANO_WORLDDIR}/etc/snmpd.config

#
# bsnmp-ucd (8)
#
begemotSnmpdModulePath."ucd" = "/usr/local/lib/snmp_ucd.so"

#
# bsnmp-regex (8)
#
#begemotSnmpdModulePath."regex" = "/usr/local/lib/snmp_regex.so"
#           %regex
#           regexConfig = "/usr/local/etc/bsnmp-regex.conf"
#           regexSocket = "/var/run/bsnmp-regex.sock"
EOF

	# Set Quagga permission
	grep -q quagga ${NANO_WORLDDIR}/etc/passwd && \
		CR 'chown -R quagga:quagga /usr/local/etc/quagga'

	# Set FRR permission
	grep -q frr ${NANO_WORLDDIR}/etc/passwd && \
		CR 'chown -R frr:frr /usr/local/etc/frr'

	# Compress the kernel (save 10Mb)
	# Disabled: dtrace didn't support compressed kernel
	#if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
	#	if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
	#		echo "Error during zipping the kernel"
	#	fi
	#fi
	# Remove some of the folders (without share/snmp)
	# usr/include : 15MB
	FOLDERS_TO_REMOVE='
usr/libexec/bsdinstall
usr/local/include
usr/local/man
usr/local/info
usr/local/share/doc
usr/local/share/examples
usr/include
usr/share/examples
usr/share/info
usr/share/man/man3
usr/share/man/man9
usr/share/me
usr/share/pc-sysinstall
usr/share/openssl
usr/share/syscons
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE
	do	
		if [ -d ${NANO_WORLDDIR}/$c ]
		then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Remove some files
    FILES_TO_REMOVE='
sbin/hastd
sbin/hastctl
usr/sbin/bsdconfig
usr/share/man/man8/bsdconfig.8.gz
usr/sbin/bhyve
usr/sbin/bhyvectl
usr/sbin/bhyveload
usr/sbin/ctladm
usr/sbin/ctld
usr/share/man/man8/ctld.8.gz
usr/sbin/hv_kvp_daemon
usr/share/man/man8/hv_kvp_daemon.8.gz
usr/bin/ctlstat
usr/local/etc/rc.d/freevrrpd.sh.sample
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
'

	if [ "${NANO_DISK_SCHEME}" != "gpt" ]; then
		# We only need these when using gpt
		FILES_TO_REMOVE="
boot/boot1.efi
boot/boot1.efifat
boot/loader.efi
$FILES_TO_REMOVE
"
	fi

    for c in ${FILES_TO_REMOVE}
    do
        if [ -f ${NANO_WORLDDIR}/$c ]
        then
			echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
        fi
    done

	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a the output of:
	# usr/src/tools/tools/build_option_survey
	# Because it's a very time consuming script, output are online:
	# https://people.freebsd.org/~olivier/build_option_survey_20160406/

TOOLCHAIN_TO_REMOVE='
usr/bin/addr2line
usr/bin/gnu-ar
usr/bin/as
usr/bin/ld
usr/bin/nm
usr/bin/objcopy
usr/bin/gnu-ranlib
usr/bin/readelf
usr/bin/size
usr/bin/strings
usr/bin/strip
usr/bin/cc
usr/bin/gcc
usr/bin/gcpp
usr/bin/cpp
usr/bin/c++
usr/bin/g++
usr/bin/CC
usr/bin/c++filt
usr/bin/gcov
usr/bin/gdb
usr/bin/gdbtui
usr/bin/ar
usr/bin/ranlib
usr/bin/c89
usr/bin/c99
usr/bin/sum
usr/bin/compile_et
usr/bin/ctags
usr/bin/file2c
usr/bin/gprof
usr/bin/indent
usr/bin/m4
usr/bin/lex
usr/bin/lex++
usr/bin/flex
usr/bin/flex++
usr/bin/mt
usr/bin/mkstr
usr/bin/rpcgen
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/nvi
usr/bin/vgrind
usr/bin/lint
usr/bin/xstr
usr/bin/lzdec
usr/bin/yacc
usr/bin/yyfix
usr/bin/byacc
usr/bin/lzdec
usr/bin/clang
usr/bin/clang++
usr/bin/clang-cpp
usr/bin/clang-tblgen
usr/bin/tblgen
usr/bin/crunchgen
usr/bin/crunchide
usr/libexec/cc1
usr/libexec/cc1plus
usr/libexec/cc1obj
usr/libexec/vfontedpr
usr/libexec/lint1
usr/libexec/lint2
usr/sbin/btxld
usr/sbin/config
usr/sbin/i2c
usr/sbin/rmt
usr/share/misc/gprof.flat
usr/share/misc/gprof.callg
usr/share/misc/vgrindefs
usr/share/misc/vgrindefs.db
usr/share/tmac/tmac.vgrind
'
    for c in $TOOLCHAIN_TO_REMOVE
    do
        if [ -f ${NANO_WORLDDIR}/$c ]; then
            echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
                echo "Error: Can't remove it!"
            fi
			# look for associated man page and delete it too
			if ! find ${NANO_WORLDDIR}/usr/share/man -name `basename $c`".*.gz" -exec rm -- {} +; then
				echo "no man page for $c"
			fi
		else
			echo "Missing file to delete: $c"
        fi
    done
	
	# Move termcap.small file
	if [ -f ${NANO_WORLDDIR}/etc/termcap.small ]; then
		mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db
	fi

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
    find ${NANO_WORLDDIR} -type f -name \*.a | xargs rm

	# Moving kerned & world debug symbols into debug.tar.xz file
	if [ -d ${NANO_WORLDDIR}/usr/lib/debug ]; then
		if [ -f  ${NANO_WORLDDIR}/boot/kernel/kernel.symbols ]; then
			if [ ! -d ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel ]; then
				mkdir -p ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
			fi
			mv ${NANO_WORLDDIR}/boot/kernel/*.symbols ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
		fi
		tar cfvZ ${NANO_OBJ}/debug.tar.xz -C ${NANO_WORLDDIR}/usr/lib debug
		rm -rf ${NANO_WORLDDIR}/usr/lib/debug
		# relocate /usr/lib/debug to /data/debug (debug archive files needs more than 1Gb for being extracted)
		ln -s /data/debug ${NANO_WORLDDIR}/usr/lib/debug
	fi

	# Generate a geom compressed image disk (Disabled)
	#if [ -f ${NANO_OBJ}/debug.tar.xz ]; then
	#	dd if=/dev/zero of=/tmp/debug.img seek=4050000 count=0
	#	MDYOYO=`mdconfig -a -t vnode -f /tmp/debug.img`
	#	newfs -o space -m 1 /dev/${MDYOYO}
	#	[ -d /tmp/mdyoyo ] || mkdir /tmp/mdyoyo
	#	mount /dev/${MDYOYO} /tmp/mdyoyo
	#	tar -C /tmp/mdyoyo -xvf ${NANO_OBJ}/debug.tar.xz
	#	mkdir /tmp/mdyoyo/src
	#	tar -C ${NANO_SRC} --exclude=.svn -cf - . | tar -xf - -C /tmp/mdyoyo/src
	#	umount /tmp/mdyoyo
	#	mdconfig -d -u ${MDYOYO}
	#	#mkuzip -L -d /tmp/debug.img
	#	mkuzip /tmp/debug.img
	#	rm /tmp/debug.img
	#fi
	# strip binaries for ports (tips from FreeNAS 8)
	pprint 4 "Stripping binaries and libraries"
	for dir in $(find ${NANO_WORLDDIR}/ -name '*bin' -or -name 'lib' -maxdepth 3); do
		for f in $(find $dir -type f); do
			strip 2>/dev/null $f || :
		done
	done	
	# Generate package inventory
	if [ -x ${NANO_WORLDDIR}/usr/local/sbin/pkg ]; then
		CR 'pkg query \*\ %n\ %v:\ %c' > ${NANO_OBJ}/packages.info
	fi
}


# Enable only serial system only
bsdrp_console_serial () {
	# Since r266895, console is set as onifconsole
	# Since r289634, 4 firsts serials console are set as onifconsole
	#sed -i "" -e /ttyu0/s/onifconsole/on/ ${NANO_WORLDDIR}/etc/ttys
	#sed -i "" -e /ttyu[13]/s/off/onifconsole/ ${NANO_WORLDDIR}/etc/ttys
	#sed -i "" -e /ttyu[13]/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

    # Disable getty on syscons devices
    #sed -i "" -e '/^ttyv[0-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial console early.
    echo "-S${COM_SPEED} -h" > ${NANO_WORLDDIR}/boot.config
}

# Enable use of keyboard/vga and serial
bsdrp_console_dual () {
	# Set serial speed (3wire is available since 11 only)
	sed -i "" -e /ttyu[1-2]/s/off/onifconsole/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /ttyu[1-2]/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /ttyu[0-2]/s/std.9600/std.${COM_SPEED}/ ${NANO_WORLDDIR}/etc/ttys
    # Tell loader to use serial and vga console, set baud speed
    echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# Standard vga console, but permit serial port to be use as vt100 console
bsdrp_console_vga () {
	# Enable onifconsole to ttyu1 to ttyu3
	# Since r289634, 4 firsts serials console are set as onifconsole
	#sed -i "" -e /ttyu[13]/s/off/onifconsole/ ${NANO_WORLDDIR}/etc/ttys
	#sed -i "" -e /ttyu[13]/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

	# Tell loader to use vga and serial and set serial speed (boot0 will be vga only)
    echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config 
}

# Special xen console configuration
bsdrp_console_xen () {
	#Remove all default virtual terminal (in pv mode, need to check in hvm)
	sed -i '' '/^ttyv/d' ${NANO_WORLDDIR}/etc/ttys
	#Add a new xc0 console
	echo 'xc0     "/usr/libexec/getty Pc"         vt100   on  secure' >> ${NANO_WORLDDIR}/etc/ttys
	#Replace the default em0 by xn0 in rc.conf
	sed -i "" -e /ifconfig_/s/em0/xn0/ ${NANO_WORLDDIR}/etc/rc.conf
}

# From FreeNAS 8
shrink_md_fbsize()
{
	# We have a lot of little files on our memory disks. Let's decrease
	# the block and frag size to fit more little files on them (this
	# halves our space requirement by ~50% on /etc and /var on 8.x --
	# and gives us more back on 9.x as the default block and frag size
	# are 4 times larger).
	sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
		${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

# Secure BSDRP by using schg flag
bsdrp_secure () {
	# TODO: Need to check if flag allready set,
	#		otherwise it will disable it
	chflags -R schg ${NANO_WORLDDIR}/bin
	chflags -R schg ${NANO_WORLDDIR}/sbin
	chflags -R schg ${NANO_WORLDDIR}/boot/kernel
	chflags -R schg ${NANO_WORLDDIR}/libexec
	chflags -R schg ${NANO_WORLDDIR}/lib	
}

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the bsdrp_custom after the cust_install_files
customize_cmd bsdrp_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root

# Secure BSDRP
# TO DO: secure the BSDRP (chflags)
#customize_cmd bsdrp_secure

sectors_to_bytes() {
	if echo "$1" | grep -iq '[kMGTP]' ; then
		# Just use the value if it contains a size suffix
		echo "$1"
	else
		# Convert sectors to bytes otherwise
		echo "${1} * 512" | bc
	fi
}

md_unmount() {
	umount $MNT || :
	mdconfig -d -u $md
}

# create GPT diskimage
create_diskimage() {
	pprint 2 "Building GPT image"
	pprint 3 "log: ${NANO_LOG}/_.di"

	(
		# Clean up any leftover from earlier
		for f in p1 p2 p3 p4 p5 p6 disk.image; do
			rm -f "${NANO_LOG}/_.$f"
		done

		# Make sure _.empty exists and is empty
		rm -rf "${NANO_LOG}/_.empty"
		mkdir -p ${NANO_LOG}/_.empty

		MNT=${NANO_LOG}/_.mnt

		# Make sure $MNT exists and is not a mountpoint
		mkdir -p "$MNT"
		umount $MNT || :

		# Convert sizes for code, conf and data to something makefs understands
		if [ "$NANO_CODESIZE" = 0 ]; then
			NANO_CODESIZE=
		else
			NANO_CODESIZE="$(sectors_to_bytes "${NANO_CODESIZE}")"
		fi

		if [ "$NANO_CONFSIZE" = 0 ]; then
			NANO_CONFSIZE=
		else
			NANO_CONFSIZE="$(sectors_to_bytes "${NANO_CONFSIZE}")"
		fi

		if [ "$NANO_DATASIZE" = 0 ]; then
			NANO_DATASIZE=
		elif [ "$NANO_DATASIZE" = -1 ]; then
			:
		else
			NANO_DATASIZE="$(sectors_to_bytes "${NANO_DATASIZE}")"
		fi

		# Create code partition 1
		makefs -B little -t ffs ${NANO_CODESIZE:+-s $NANO_CODESIZE} ${NANO_LOG}/_.p3 ${NANO_WORLDDIR}

		# Create code partition 2
		if [ "$NANO_INIT_IMG2" -ne "0" ]; then
			# Create partition containing actual data for code partition 2
			makefs -B little -t ffs ${NANO_CODESIZE:+-s $NANO_CODESIZE} ${NANO_LOG}/_.p4 ${NANO_WORLDDIR}
			md=$(mdconfig -a -t vnode -f ${NANO_LOG}/_.p4)
			trap md_unmount 1 2 15
			mount /dev/$md $MNT

			# Make sure the right partition is mounted when booting from partition 2
			sed -i "" -e /${NANO_LABEL}1/s/${NANO_LABEL}1/${NANO_LABEL}2/ $MNT/etc/fstab
			md_unmount
			trap - 1 2 15
		else
			# Create empty dummy for code partition 2
			NANO_CODESIZE2=$(stat -f "%z" ${NANO_LOG}/_.p3)
			makefs -B little -t ffs -s ${NANO_CODESIZE:-$NANO_CODESIZE2} ${NANO_LOG}/_.p4 ${NANO_LOG}/_.empty
		fi

		# Create config partition
		makefs -B little -t ffs -s ${NANO_CONFSIZE:-32m} ${NANO_LOG}/_.p5 ${NANO_LOG}/_.empty

		# Create data partition
		if [ "$NANO_DATASIZE" != -1 ]; then
			makefs -B little -t ffs -S-s ${NANO_DATASIZE:-32m} ${NANO_LOG}/_.p6 ${NANO_LOG}/_.empty
			dataopts="-p freebsd-ufs/${NANO_LABEL}data:=${NANO_LOG}/_.p6"
		else
			dataopts=""
		fi

		# _.p3 contains the upgrade image
		ln ${NANO_LOG}/_.p3 ${NANO_LOG}/_.disk.image

		md=$(mdconfig -a -t vnode -f ${NANO_LOG}/_.p3)

		trap md_unmount 1 2 15
		mount /dev/$md $MNT

		(
			cd ${MNT}
			mtree -c
		) >${NANO_LOG}/_.mtree

		md_unmount
		trap - 1 2 15

		# Add efi loader if necessary
		if [ "${NANO_GPT_INSTALL_EFI}" = 0 ]; then
			efiopts="efi::1m"
		else
			efiopts="efi:=${NANO_WORLDDIR}/boot/boot1.efifat"
		fi

		# Create the actual disk image
		mkimg -s gpt -b ${NANO_WORLDDIR}/boot/pmbr \
			-p ${efiopts} \
			-p freebsd-boot:=${NANO_WORLDDIR}/boot/gptboot \
			-p freebsd-ufs/${NANO_LABEL}1:=${NANO_LOG}/_.p3 \
			-p freebsd-ufs/${NANO_LABEL}2:=${NANO_LOG}/_.p4 \
			-p freebsd-ufs/${NANO_LABEL}cfg:=${NANO_LOG}/_.p5 \
			$dataopts \
			-c ${NANO_DISK_SIZE}m \
			-o ${NANO_LOG}/${NANO_IMGNAME}
	) > ${NANO_LOG}/_.di 2>&1
}
